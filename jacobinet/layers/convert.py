import logging
from typing import Any, Callable, Optional

# custom layers
from jacobinet.layers import (  # merging
    get_backward_Abs,
    get_backward_Absolute,
    get_backward_Activation,
    get_backward_Add,
    get_backward_AMax,
    get_backward_AMin,
    get_backward_Arccos,
    get_backward_Arccosh,
    get_backward_Arcsin,
    get_backward_Arcsinh,
    get_backward_Arctan,
    get_backward_Arctanh,
    get_backward_Average,
    get_backward_AveragePooling1D,
    get_backward_AveragePooling2D,
    get_backward_AveragePooling3D,
    get_backward_BatchNormalization,
    get_backward_Concatenate,
    get_backward_Conv1D,
    get_backward_Conv2D,
    get_backward_Cos,
    get_backward_Cosh,
    get_backward_Cropping1D,
    get_backward_Cropping2D,
    get_backward_Cropping3D,
    get_backward_CumProd,
    get_backward_Cumsum,
    get_backward_Dense,
    get_backward_DepthwiseConv1D,
    get_backward_DepthwiseConv2D,
    get_backward_Diagonal,
    get_backward_EinsumDense,
    get_backward_ELU,
    get_backward_ExpandDims,
    get_backward_Expm1,
    get_backward_Flatten,
    get_backward_Floor,
    get_backward_FullLike,
    get_backward_GlobalAveragePooling1D,
    get_backward_GlobalAveragePooling2D,
    get_backward_GlobalAveragePooling3D,
    get_backward_GlobalMaxPooling2D,
    get_backward_LeakyReLU,
    get_backward_Log,
    get_backward_Log1p,
    get_backward_Log2,
    get_backward_Log10,
    get_backward_Maximum,
    get_backward_MaxPooling2D,
    get_backward_Minimum,
    get_backward_MoveAxis,
    get_backward_Multiply,
    get_backward_Negative,
    get_backward_Norm,
    get_backward_OnesLike,
    get_backward_Permute,
    get_backward_PReLU,
    get_backward_Prod,
    get_backward_Reciprocal,
    get_backward_ReLU,
    get_backward_Repeat,
    get_backward_RepeatVector,
    get_backward_Reshape,
    get_backward_Roll,
    get_backward_SeparableConv1D,
    get_backward_SeparableConv2D,
    get_backward_Sign,
    get_backward_Sin,
    get_backward_Sinh,
    get_backward_Sort,
    get_backward_Sqrt,
    get_backward_Square,
    get_backward_Subtract,
    get_backward_SwapAxes,
    get_backward_Tan,
    get_backward_Trace,
    get_backward_Transpose,
    get_backward_Tril,
    get_backward_Triu,
    get_backward_Trunc,
    get_backward_UpSampling1D,
    get_backward_UpSampling2D,
    get_backward_UpSampling3D,
    get_backward_Var,
    get_backward_ZeroPadding1D,
    get_backward_ZeroPadding2D,
    get_backward_ZeroPadding3D,
    get_backward_ZerosLike,
)
from jacobinet.layers.layer import BackwardLayer
from keras.layers import (  # type:ignore
    ELU,
    Activation,
    Add,
    Average,
    AveragePooling1D,
    AveragePooling2D,
    AveragePooling3D,
    BatchNormalization,
    Concatenate,
    Conv1D,
    Conv2D,
    Cropping1D,
    Cropping2D,
    Cropping3D,
    Dense,
    DepthwiseConv1D,
    DepthwiseConv2D,
    EinsumDense,
    Flatten,
    GlobalAveragePooling1D,
    GlobalAveragePooling2D,
    GlobalAveragePooling3D,
    GlobalMaxPooling2D,
    Layer,
    LeakyReLU,
    Maximum,
    MaxPooling2D,
    Minimum,
    Multiply,
    Permute,
    PReLU,
    ReLU,
    RepeatVector,
    Reshape,
    SeparableConv1D,
    SeparableConv2D,
    Subtract,
    UpSampling1D,
    UpSampling2D,
    UpSampling3D,
    ZeroPadding1D,
    ZeroPadding2D,
    ZeroPadding3D,
)
from keras_custom.layers.numpy import (  # Average,
    Abs,
    Absolute,
    AMax,
    AMin,
    Arccos,
    Arccosh,
    Arcsin,
    Arcsinh,
    Arctan,
    Arctanh,
    Cos,
    Cosh,
    Cumprod,
    Cumsum,
    Diagonal,
    ExpandDims,
    Expm1,
    Floor,
    FullLike,
    Log,
    Log1p,
    Log2,
    Log10,
    MoveAxis,
    Negative,
    Norm,
    OnesLike,
    Prod,
    Reciprocal,
    Repeat,
    Roll,
    Sign,
    Sin,
    Sinh,
    Sort,
    Sqrt,
    Square,
    SwapAxes,
    Tan,
    Trace,
    Transpose,
    Tril,
    Triu,
    Trunc,
    Var,
    ZerosLike,
)

logger = logging.getLogger(__name__)

BACKWARD_PREFIX = "get_backward"

default_mapping_keras2backward_layer: dict[type[Layer], Callable[..., Any]] = {
    # convolution
    Conv2D: get_backward_Conv2D,
    Conv1D: get_backward_Conv1D,
    DepthwiseConv1D: get_backward_DepthwiseConv1D,
    DepthwiseConv2D: get_backward_DepthwiseConv2D,
    SeparableConv2D: get_backward_SeparableConv2D,
    SeparableConv1D: get_backward_SeparableConv1D,
    # reshaping
    ZeroPadding1D: get_backward_ZeroPadding1D,
    ZeroPadding2D: get_backward_ZeroPadding2D,
    ZeroPadding3D: get_backward_ZeroPadding3D,
    Cropping1D: get_backward_Cropping1D,
    Cropping2D: get_backward_Cropping2D,
    Cropping3D: get_backward_Cropping3D,
    UpSampling2D: get_backward_UpSampling2D,
    UpSampling1D: get_backward_UpSampling1D,
    UpSampling3D: get_backward_UpSampling3D,
    Flatten: get_backward_Flatten,
    Reshape: get_backward_Reshape,
    Permute: get_backward_Permute,
    RepeatVector: get_backward_RepeatVector,
    # normalization
    BatchNormalization: get_backward_BatchNormalization,
    # pooling
    AveragePooling2D: get_backward_AveragePooling2D,
    AveragePooling1D: get_backward_AveragePooling1D,
    AveragePooling3D: get_backward_AveragePooling3D,
    GlobalAveragePooling2D: get_backward_GlobalAveragePooling2D,
    GlobalAveragePooling1D: get_backward_GlobalAveragePooling1D,
    GlobalAveragePooling3D: get_backward_GlobalAveragePooling3D,
    MaxPooling2D: get_backward_MaxPooling2D,
    GlobalMaxPooling2D: get_backward_GlobalMaxPooling2D,
    # core
    Dense: get_backward_Dense,
    EinsumDense: get_backward_EinsumDense,
    # activations
    Activation: get_backward_Activation,
    ReLU: get_backward_ReLU,
    LeakyReLU: get_backward_LeakyReLU,
    PReLU: get_backward_PReLU,
    ELU: get_backward_ELU,
    # merging
    Add: get_backward_Add,
    Average: get_backward_Average,
    Subtract: get_backward_Subtract,
    Concatenate: get_backward_Concatenate,
    Maximum: get_backward_Maximum,
    Minimum: get_backward_Minimum,
    Multiply: get_backward_Multiply,
    # custom
    Abs: get_backward_Abs,
    Absolute: get_backward_Absolute,
    AMax: get_backward_AMax,
    AMin: get_backward_AMin,
    Arccos: get_backward_Arccos,
    Arccosh: get_backward_Arccosh,
    Arcsin: get_backward_Arcsin,
    Arcsinh: get_backward_Arcsinh,
    Arctan: get_backward_Arctan,
    Arctanh: get_backward_Arctanh,
    Average: get_backward_Average,
    Cos: get_backward_Cos,
    Cosh: get_backward_Cosh,
    Cumprod: get_backward_CumProd,
    Cumsum: get_backward_Cumsum,
    Floor: get_backward_Floor,
    Log: get_backward_Log,
    Log10: get_backward_Log10,
    Log1p: get_backward_Log1p,
    Log2: get_backward_Log2,
    Sin: get_backward_Sin,
    Sinh: get_backward_Sinh,
    Sign: get_backward_Sign,
    Sqrt: get_backward_Sqrt,
    Square: get_backward_Square,
    Sort: get_backward_Sort,
    Tan: get_backward_Tan,
    Trace: get_backward_Trace,
    Trunc: get_backward_Trunc,
    Prod: get_backward_Prod,
    Reciprocal: get_backward_Reciprocal,
    Repeat: get_backward_Repeat,
    Negative: get_backward_Negative,
    OnesLike: get_backward_OnesLike,
    ZerosLike: get_backward_ZerosLike,
    Expm1: get_backward_Expm1,
    ExpandDims: get_backward_ExpandDims,
    Diagonal: get_backward_Diagonal,
    Triu: get_backward_Triu,
    Tril: get_backward_Tril,
    FullLike: get_backward_FullLike,
    Roll: get_backward_Roll,
    Var: get_backward_Var,
    Norm: get_backward_Norm,
    SwapAxes: get_backward_SwapAxes,
    Transpose: get_backward_Transpose,
    MoveAxis: get_backward_MoveAxis,
}
"""Default mapping between keras layers and get_backward callable"""


def get_backward(
    layer: Layer,
    mapping_keras2backward_classes: Optional[dict[type[Layer], type[BackwardLayer]]] = None,
    **kwargs: Any,
) -> BackwardLayer:
    keras_class = type(layer)

    if mapping_keras2backward_classes is not None:
        default_mapping_keras2backward_layer.update(mapping_keras2backward_classes)

    get_backward_layer = default_mapping_keras2backward_layer.get(keras_class)
    if get_backward_layer is None:
        raise ValueError(
            "The backward mapping from the current class is not native and not available in mapping_keras2backward_layer, {} not found".format(
                keras_class
            )
        )
    return get_backward_layer(layer)
